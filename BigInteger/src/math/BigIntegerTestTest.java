package math;

import static org.junit.Assert.*;

import org.junit.Test;

public class BigIntegerTestTest {

	@Test
public void testMaxAbs() {
		
		
		assertEquals(BigInteger.parse("1234").toString(),"1234"
				+ "");
		assertEquals(BigInteger.parse("-1234").toString(),"-1234");
		assertEquals(BigInteger.parse("0").toString(),"0");
		assertEquals(BigInteger.parse("000").toString(),"0");
		assertEquals(BigInteger.parse("-0").toString(),"0");
		assertEquals(BigInteger.parsetoString(),"-141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173");
		assertEquals(BigInteger.parse("-0").toString(),"0");
		
		
		assertEquals("0",BigInteger.parse("100").add(BigInteger.parse("-100")).toString());
		assertEquals("5242",BigInteger.parse("5342").add(BigInteger.parse("-100")).toString());
		assertEquals(String.valueOf(1339643-1239643),BigInteger.parse("-1239643").add(BigInteger.parse("1339643")).toString());
		assertEquals(String.valueOf(23497+234),BigInteger.parse("234").add(BigInteger.parse("23497")).toString());
		assertEquals(String.valueOf(-4928-2341),BigInteger.parse("-2341").add(BigInteger.parse("-4928")).toString());
		assertEquals(String.valueOf(4928),BigInteger.parse("-0").add(BigInteger.parse("4928")).toString());
		assertEquals(String.valueOf(0),BigInteger.parse("0").add(BigInteger.parse("-0")).toString());
		assertEquals(String.valueOf(123-222),BigInteger.parse("-222").add(BigInteger.parse("123")).toString());
		assertEquals(String.valueOf(100-99),BigInteger.parse("100").add(BigInteger.parse("-99")).toString());
		
		assertEquals("1",BigInteger.parse("1001").add(BigInteger.parse("-1000")).toString());
		assertEquals("1",BigInteger.parse("00001001").add(BigInteger.parse("-1000")).toString());
		assertEquals("1",BigInteger.parse("000001001").add(BigInteger.parse("-000001000")).toString());
		
		{
			DigitNode x = new DigitNode(4,null);
			x.next = new DigitNode(0,null);
			x.next.next = new DigitNode(0,null);
			BigInteger a =  new BigInteger();
			a.front = x;
			a.numDigits = 3;
			//assertEquals(a.removeLeadingZeros(a).toString(), "4");
			assertEquals(5,a.add(BigInteger.parse("12345")).numDigits);
		}
		
		
		assertEquals("25",BigInteger.parse("0").add(BigInteger.parse("25")).toString());
		assertEquals(String.valueOf(5*5),BigInteger.parse("5").multiply(BigInteger.parse("5")).toString());
		assertEquals(String.valueOf(65*65),BigInteger.parse("65").multiply(BigInteger.parse("65")).toString());
		assertEquals(String.valueOf(16857*65),BigInteger.parse("16857").multiply(BigInteger.parse("65")).toString());
		assertEquals(String.valueOf(65*16857),BigInteger.parse("65").multiply(BigInteger.parse("16857")).toString());
		assertEquals(String.valueOf(0*65),BigInteger.parse("0").multiply(BigInteger.parse("65")).toString());
		assertEquals(String.valueOf(0*65),BigInteger.parse("65").multiply(BigInteger.parse("0")).toString());
		assertEquals(String.valueOf(0*-65),BigInteger.parse("0").multiply(BigInteger.parse("-65")).toString());
		assertEquals(String.valueOf(-0*65),BigInteger.parse("-0").multiply(BigInteger.parse("65")).toString());
		assertEquals(String.valueOf(-345*-65),BigInteger.parse("-345").multiply(BigInteger.parse("-65")).toString());
		assertEquals(String.valueOf(-345*66),BigInteger.parse("-345").multiply(BigInteger.parse("66")).toString());
		assertEquals(String.valueOf(-345),BigInteger.parse("-345").multiply(BigInteger.parse("1")).toString());
		assertEquals("119263407551695601457313169025",BigInteger.parse("-345345345345345").multiply(BigInteger.parse("-345345345345345")).toString());
		
	}
}
